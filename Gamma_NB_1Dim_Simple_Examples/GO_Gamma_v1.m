function GO_Gamma_alpha = GO_Gamma_v1(x, alpha1)
% Calculate GO gradient for Gamma Random Variable x ~ Gam(alpha, 1)
% with respect to its shape parameter, alpha
% 
% Good Approximation!
%
% Yulai Cong
% 2018/04/21

%%
x = double(x) ;
alpha1 = double(alpha1) ; 
if (size(x, 1) == 1) && (size(x, 2) > 1)
    x = x(:) ;
    alpha1 = alpha1(:) ;
    flag_transpose = 1 ;
else
    flag_transpose = 0 ;
end

logx = logmax(x) ;
ex_gamma_xa = exp(x + gammaln(alpha1) + (1 - alpha1) .* logx) ;
psi_m_log = psi(alpha1 + 1) - logx ;
igamma_up_reg = gammainc(x, alpha1, 'upper') ;

% Part 1
indx1 = (x <= 1e-2) ;
if any(indx1(:))
    x_indx1 = x(indx1) ;
    alpha_indx1 = alpha1(indx1) ;
%     GO_Gamma_alpha_value1 = ex_gamma_xa(indx1) .* psi_m_log(indx1) .* (1 - igamma_up_reg(indx1)) + ...
%         exp(x_indx1) .* x_indx1.^2 ./ alpha_indx1 .* (...
%         (alpha_indx1 + 1).^(-2) - x_indx1 .* (alpha_indx1 + 2).^(-2) + ...
%         0.5 * (x_indx1 ./ (alpha_indx1 + 3)).^2 ...
%         ) ;
    GO_Gamma_alpha_value1 = exp(x_indx1) .* x_indx1 ./ alpha_indx1 .* (...
        psi(alpha_indx1 + 1) - log(x_indx1) + ...
        x_indx1 ./ (alpha_indx1 + 1).^2 - ...
        (x_indx1 ./ (alpha_indx1 + 2)).^2 + ...
        0.5 * (x_indx1.^3) ./ ((alpha_indx1 + 3).^2)...
        ) ;
else
    GO_Gamma_alpha_value1 = [] ;
end

% Part 2
indx2 = (x > 1e-2) & (alpha1 <= 3) ;
if any(indx2(:))
    KK = 15 ; kk = 1:KK ;
    x_indx2 = x(indx2) ;
    alpha_indx2 = alpha1(indx2) ;
    GO_Gamma_alpha_value2 = ex_gamma_xa(indx2) .* ( ...
        -psi_m_log(indx2) .* igamma_up_reg(indx2) + (...
            psi(alpha_indx2 + KK + 1) - logx(indx2) - ...
            sum(...
            gammainc(x_indx2 * ones(1, KK), alpha_indx2 + kk, 'upper') ./ (alpha_indx2 + kk)...
            , 2) ) ...
        ) ;
    
    N_alpha = fix(exp(...
        -0.488484605941243044124888683654717169702053070068359375 * log(alpha_indx2) ...
        + 1.6948389987594634220613443176262080669403076171875 )) ;
    indxtmp = x_indx2 > (alpha_indx2 + N_alpha .* sqrt(alpha_indx2)) ;
    if any(indxtmp(:))
        GO_Gamma_alpha_value2(indxtmp) = max(GO_Gamma_alpha_value2(indxtmp), ...
            1 ./ alpha_indx2(indxtmp) .* (1 - ...
            x_indx2(indxtmp) .* (psi(alpha_indx2(indxtmp) + 1) - log(x_indx2(indxtmp))) .* gammainc(x_indx2(indxtmp), alpha_indx2(indxtmp), 'scaledupper') ...
        ) ) ;
%         GO_Gamma_alpha_value2(indxtmp) = max(GO_Gamma_alpha_value2(indxtmp), ...
%             1 ./ alpha_indx2(indxtmp) - exp(x_indx2(indxtmp) + gammaln(alpha_indx2(indxtmp)) + (1 - alpha_indx2(indxtmp)) .* log(x_indx2(indxtmp))) .* (...
%             (psi(alpha_indx2(indxtmp) + 1) - log(x_indx2(indxtmp))) .* gammainc(x_indx2(indxtmp), alpha_indx2(indxtmp), 'upper') ) ...
%             ) ;
    end
else
    GO_Gamma_alpha_value2 = [] ;
end


% Part 3
indx3 = (x > 1e-2) & (alpha1 > 3) & (alpha1 <= 500) ;
if any(indx3(:))
    KK = 10 ; kk = 1:KK ;
    x_indx3 = x(indx3) ;
    alpha_indx3 = alpha1(indx3) ;

    x_l = alpha_indx3 - log(alpha_indx3) .* sqrt(alpha_indx3) ;

    logx_l = log(x_l) ;
    ex_gamma_xa_l = exp(x_l + gammaln(alpha_indx3) + (1 - alpha_indx3) .* logx_l) ;
    psi_m_log_l = psi(alpha_indx3 + 1) - logx_l ;
    igamma_low_reg_l = gammainc(x_l, alpha_indx3, 'lower') ;
%     igamma_up_reg_l = gammainc(x_l, alpha_indx3, 'upper') ;
%     f_l = ex_gamma_xa_l .* (-psi_m_log_l .* igamma_up_reg + ...
%         ((psi(alpha_indx3 + KK + 1) - logx_l) - ...
%         sum(...
%             gammainc(x_l * ones(1, KK), alpha_indx3 + kk, 'upper') ./ (alpha_indx3 + kk) ...
%         , 2)) ...
%         ) ;
    f_l = ex_gamma_xa_l .* (psi_m_log_l .* igamma_low_reg_l + ...
        sum(...
            gammainc(x_l * ones(1, KK), alpha_indx3 + kk, 'lower') ./ (alpha_indx3 + kk) ...
        , 2) ...
        ) ;
    
    g_l = (1 + (1 - alpha_indx3) ./ x_l) .* f_l + (...
        -ex_gamma_xa_l ./ x_l .* igamma_low_reg_l + (...
        psi_m_log_l + sum(...
                exp( ...
                    kk .* log(x_l) + gammaln(alpha_indx3) - ...
                    gammaln(alpha_indx3 + kk + 1) ...
                )...
        , 2) )...
        ) ;

    x_m = alpha_indx3 ; 

    f_m = 1 + 0.167303227226226980395296095593948848545551300048828125 ./ ...
              (...
                  x_m .^ 1.0008649793164192676186985409003682434558868408203125 ...
                  - 0.07516433982238841793321881823430885560810565948486328125 ...
              ) ;

    x_r = 2 .* alpha_indx3 - x_l ;

    f_r = 1 ./ alpha_indx3 - exp(x_r + gammaln(alpha_indx3) + (1 - alpha_indx3) .* log(x_r)) .* (...
        (psi(alpha_indx3 + 1) - log(x_r)) .* gammainc(x_r, alpha_indx3, 'upper') ...
        ) ;

    lambda_r = exp(...
            959.627335718427275423891842365264892578125 ./ (...
                alpha_indx3 .^ 1.324768828487964622553363369661383330821990966796875 ...
                + 142.427456986662718918523751199245452880859375 ...
            ) ...
            - 13.01439996187340142341781756840646266937255859375 ...
        ) ;

    x_mat_i = [x_l, x_m, x_r] ;
    x_mat_bar_i = x_mat_i - alpha_indx3 ;
    x_mat_hat_i = sqrt(x_mat_i) - sqrt(alpha_indx3) ;
    f_mat_i = [f_l, f_m, f_r] ;
    lambda_mat_i = [ones(length(alpha_indx3), 2), lambda_r] ;

    x_mat_j = x_l ;
    g_mat_j = g_l ;
    lambda_mat_j = ones(length(alpha_indx3), 1) ;

    A = sum(lambda_mat_i .* x_mat_bar_i.^2, 2) + sum(lambda_mat_j, 2) ;
    B = sum(lambda_mat_i .* x_mat_bar_i .* x_mat_hat_i, 2) + ...
        sum(lambda_mat_j ./ 2 ./ sqrt(x_mat_j) , 2) ;
    C = sum(lambda_mat_i .* x_mat_bar_i, 2) ;
    D = sum(lambda_mat_i .* x_mat_hat_i.^2, 2) + sum(lambda_mat_j ./ 4 ./ x_mat_j, 2) ;
    E = sum(lambda_mat_i .* x_mat_hat_i, 2) ;
    F = sum(lambda_mat_i, 2) ;
    G = sum(lambda_mat_i .* x_mat_bar_i .* f_mat_i, 2) + sum(lambda_mat_j .* g_mat_j, 2) ;
    H = sum(lambda_mat_i .* x_mat_hat_i .* f_mat_i, 2) + ...
        sum(lambda_mat_j ./ 2 ./ sqrt(x_mat_j) .* g_mat_j, 2) ;
    I = sum(lambda_mat_i .* f_mat_i, 2) ;

    Z = F .* B.^2 - 2 .* B .* C .* E + D .* C.^2 + A .* E.^2 - A .* D .* F ;

    a_cor = 1 ./ Z .* (G .* (E.^2 - D .* F) + H .* (B .* F - C .* E) - I .* (B .* E - C .* D)) ;
    b_cor = 1 ./ Z .* (G .* (B .* F - C .* E) + H .* (C.^2 - A .* F) - I .* (B .* C - A .* E)) ;
    c_cor = 1 ./ Z .* (-G .* (B .* E - C .* D) + I .* (B.^2 - A .* D) - H .* (B .* C - A .* E)) ;

    GO_Gamma_alpha_value3 = a_cor .* (x_indx3 - alpha_indx3) + b_cor .* (sqrt(x_indx3) - sqrt(alpha_indx3)) + c_cor ;
%     GO_Gamma_alpha_value3 = max(GO_Gamma_alpha_value3, ...
%         1 ./ alpha_indx3 - exp(x_indx3 + gammaln(alpha_indx3) + (1 - alpha_indx3) .* log(x_indx3)) .* (...
%         (psi(alpha_indx3 + 1) - log(x_indx3)) .* gammainc(x_indx3, alpha_indx3, 'upper') ) ...
%         ) ;
    GO_Gamma_alpha_value3 = max(GO_Gamma_alpha_value3, ...
        1 ./ alpha_indx3 .* (1 - ...
            x_indx3 .* (psi(alpha_indx3 + 1) - log(x_indx3)) .* gammainc(x_indx3, alpha_indx3, 'scaledupper') ...
        ) ) ;
else
    GO_Gamma_alpha_value3 = [] ;
end

% Part 4
indx4 = (x > 1e-2) & (alpha1 > 500) ;
if any(indx4(:))
    x_indx4 = x(indx4) ;
    alpha_indx4 = alpha1(indx4) ;

    f_m_large = 1 + 0.167303227226226980395296095593948848545551300048828125 ./ ...
              (...
                  alpha_indx4 .^ 1.0008649793164192676186985409003682434558868408203125 ...
                  - 0.07516433982238841793321881823430885560810565948486328125 ...
              ) ;

    g_m_large = 0.54116502161502622048061539317131973803043365478515625 .* ...
        alpha_indx4 .^ (-1.010274491769996618728555404231883585453033447265625) ;

    GO_Gamma_alpha_value4 = f_m_large + g_m_large .* (x_indx4 - alpha_indx4) ;
    
    tmp = (x_indx4 >= alpha_indx4 + 2 * log(alpha_indx4) .* sqrt(alpha_indx4)) ;
    if any(tmp(:))
        GO_Gamma_alpha_value4(tmp) = 1 ./ alpha_indx4(tmp) .* (1 - ...
                x_indx4(tmp) .* (psi(alpha_indx4(tmp) + 1) - log(x_indx4(tmp))) .* gammainc(x_indx4(tmp), alpha_indx4(tmp), 'scaledupper') ...
            ) ;
%         GO_Gamma_alpha_value4(tmp) = min(GO_Gamma_alpha_value4(tmp), ...
%             1 ./ alpha_indx4(tmp) - exp(x_indx4(tmp) + gammaln(alpha_indx4(tmp)) + (1 - alpha_indx4(tmp)) .* log(x_indx4(tmp))) .* (...
%             (psi(alpha_indx4(tmp) + 1) - log(x_indx4(tmp))) .* gammainc(x_indx4(tmp), alpha_indx4(tmp), 'upper') ) ...
%         ) ;
    end
else
    GO_Gamma_alpha_value4 = [] ;
end

% Summerize
GO_Gamma_alpha = zeros(size(x)) ;
GO_Gamma_alpha(indx1) = GO_Gamma_alpha_value1 ;
GO_Gamma_alpha(indx2) = GO_Gamma_alpha_value2 ;
GO_Gamma_alpha(indx3) = GO_Gamma_alpha_value3 ;
GO_Gamma_alpha(indx4) = GO_Gamma_alpha_value4 ;


if isnan(GO_Gamma_alpha(:)) | isinf(GO_Gamma_alpha(:))
    aaa = 1 ;
end
    


if flag_transpose
    GO_Gamma_alpha = GO_Gamma_alpha.' ;
end

